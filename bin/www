#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('mtb:server');
const https = require('https');
const fs = require('fs');
const { resolve } = require('path');
const { config } = require('dotenv');
const app = require('../app');

/**
 * Dotenv configuration as root of the project.
 * Following env variable should be set to Telegram bot token.
 * ! process.env.TOKEN
 */

config({ path: resolve(__dirname, '../.env') });

/**
 * Create HTTP server.
 */

const port = '443';
app.set('port', port);
const server = https.createServer(
  {
    key: fs.readFileSync('server.key'),
    cert: fs.readFileSync('server.pem'),
  },
  app,
);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

// Bind the Listeners
server.on('error', onError);
server.on('listening', onListening);
